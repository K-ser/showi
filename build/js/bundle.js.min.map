{"version":3,"sources":["navClose.js","statsCounters.js","testimonials.js","video.js"],"names":["navBar","document","querySelector","navcloseBtn","navLinks","querySelectorAll","toggleSidebar","classList","toggle","addEventListener","e","stopPropagation","forEach","link","event","contains","target","statsSecction","statscounters","startCounting","counter","innerText","updateCounter","getAttribute","current","increment","Math","ceil","setTimeout","observer","IntersectionObserver","entries","entry","isIntersecting","unobserve","threshold","observe","testimonials","testimonialsImages","interval","currentIndex","showTestimonial","index","testimonial","i","remove","add","image","activeImage","nextTestimonial","length","setInterval","videoContainer","getElementById","innerHTML","disconnect"],"mappings":"AAAA,MAAAA,OAAAC,SAAAC,cAAA,aACAC,YAAAF,SAAAC,cAAA,eACAE,SAAAH,SAAAI,iBAAA,qBAoBA,SAAAC,gBACAN,OAAAO,UAAAC,OAAA,QACAL,YAAAI,UAAAC,OAAA,YApBAL,YAAAM,iBAAA,QAAAC,IACAA,EAAAC,kBACAL,kBAGAF,SAAAQ,QAAAC,IACAA,EAAAJ,iBAAA,QAAAH,iBAGAL,SAAAQ,iBAAA,SAAA,SAAAK,IACAd,OAAAe,SAAAD,EAAAE,SAGAhB,OAAAO,UAAAQ,SAAA,SACAT,mBClBA,MAAAW,cAAAhB,SAAAC,cAAA,mBACAgB,cAAAjB,SAAAI,iBAAA,gBAGAc,cAAAC,IACAA,EAAAC,UAAA,IAEA,MAAAC,EAAA,KACA,MAAAN,GAAAI,EAAAG,aAAA,eACAC,GAAAJ,EAAAC,UACAI,EAAAT,EAAA,IAEAQ,EAAAR,GACAI,EAAAC,UAAA,GAAAK,KAAAC,KAAAH,EAAAC,GACAG,WAAAN,EAAA,KAEAF,EAAAC,UAAAL,GAIAM,KAIAO,SAAA,IAAAC,qBAAA,CAAAC,EAAAF,KACAE,EAAAnB,QAAAoB,IACAA,EAAAC,iBACAf,cAAAN,QAAAQ,IACAD,cAAAC,KAEAS,EAAAK,UAAAF,EAAAhB,YAGA,CAAAmB,UAAA,KAEAN,SAAAO,QAAAnB,eCnCAhB,SAAAQ,iBAAA,oBAAA,WACA,MAAA4B,EAAApC,SAAAI,iBAAA,qBACAiC,EAAArC,SAAAI,iBAAA,oBAEA,IACAkC,EADAC,EAAA,EAGA,SAAAC,EAAAC,GACAL,EAAAzB,QAAA,CAAA+B,EAAAC,KACAD,EAAApC,UAAAsC,OAAA,UACAD,IAAAF,GACAC,EAAApC,UAAAuC,IAAA,YAOA,SAAAJ,GACAJ,EAAA1B,QAAA,CAAAmC,EAAAH,KACAG,EAAAxC,UAAAsC,OAAA,cACAD,IAAAF,GACAK,EAAAxC,UAAAuC,IAAA,cAEAC,EAAAtC,iBAAA,QAAA,KACAgC,EAAAG,OAVAI,CAAAN,GAeA,SAAAO,IACAT,GAAAA,EAAA,GAAAH,EAAAa,OACAT,EAAAD,GAYAC,EAAAD,GAHAD,EAAAY,YAAAF,EAAA,QCzCA,MAAAG,eAAAnD,SAAAoD,eAAA,mBACApD,SAAAQ,iBAAA,mBAAA,KACA,MAAAoB,EAAA,IAAAC,qBAAAC,IACAA,EAAAnB,QAAAoB,IACAA,EAAAC,iBAEAmB,eAAAE,UAAA,qfAUAzB,EAAA0B,kBAKA1B,EAAAO,QAAAgB","file":"bundle.js","sourcesContent":["const navBar = document.querySelector('.main-nav');\r\nconst navcloseBtn = document.querySelector('.nav-button');\r\nconst navLinks = document.querySelectorAll('.main-nav__list a');\r\n\r\nnavcloseBtn.addEventListener('click', (e) => {\r\n    e.stopPropagation(); // Evita que el evento se propague al contenedor del menú  \r\n    toggleSidebar();\r\n});\r\n\r\nnavLinks.forEach((link) => {\r\n  link.addEventListener('click', toggleSidebar);\r\n});\r\n\r\ndocument.addEventListener('click', function(event) {\r\n    const isClickInside = navBar.contains(event.target); // Verifica si el clic fue dentro del menú\r\n\r\n    // Si el clic fue fuera del menú y no dentro del navBar (excepto los enlaces), cierra el menú\r\n    if (!isClickInside && navBar.classList.contains('open')) {\r\n        toggleSidebar();\r\n    }\r\n});\r\n\r\nfunction toggleSidebar() {\r\n  navBar.classList.toggle('open');\r\n  navcloseBtn.classList.toggle('open-btn');\r\n}","const statsSecction = document.querySelector('.stats-secction');\r\nconst statscounters = document.querySelectorAll('.stat-number');\r\n\r\n// Funcion que inicia el contador\r\nconst startCounting = (counter) => {\r\n    counter.innerText = '0';\r\n\r\n    const updateCounter = () => {\r\n        const target = +counter.getAttribute('data-target');\r\n        const current = +counter.innerText;\r\n        const increment = target / 100;\r\n\r\n        if (current < target) {\r\n            counter.innerText = `${Math.ceil(current + increment)}`;\r\n            setTimeout(updateCounter, 30);\r\n        } else {\r\n            counter.innerText = target;\r\n        }\r\n    };\r\n\r\n    updateCounter();\r\n};\r\n\r\n// Usar IntersectionObserver\r\nconst observer = new IntersectionObserver((entries, observer) => {\r\n    entries.forEach((entry) => {\r\n        if (entry.isIntersecting) {\r\n            statscounters.forEach(counter => {\r\n                startCounting(counter)\r\n            });\r\n            observer.unobserve(entry.target); // Detener la observación después de activarlo\r\n        }\r\n    });\r\n}, { threshold: 0.5 }); // El 50% del elemento debe estar visible\r\n\r\nobserver.observe(statsSecction);","document.addEventListener('DOMContentLoaded', function () {\r\n    const testimonials = document.querySelectorAll('.testimonial-wrap');\r\n    const testimonialsImages = document.querySelectorAll('.testimonial-img');\r\n    \r\n    let currentIndex = 0;\r\n    let interval;\r\n    \r\n    function showTestimonial(index) {\r\n        testimonials.forEach((testimonial, i) => {\r\n            testimonial.classList.remove('active');\r\n            if ( i === index ) {\r\n                testimonial.classList.add('active');\r\n            }\r\n        });\r\n\r\n        activeImage(index);\r\n    }\r\n\r\n    function activeImage(index) {\r\n        testimonialsImages.forEach((image, i) => {\r\n            image.classList.remove('active-img');\r\n            if ( i === index) {\r\n                image.classList.add('active-img');\r\n            }\r\n            image.addEventListener('click', () => {\r\n                showTestimonial(i);\r\n            })\r\n        })\r\n    }\r\n\r\n    function nextTestimonial() {\r\n        currentIndex = (currentIndex + 1) % testimonials.length;\r\n        showTestimonial(currentIndex);\r\n    }\r\n\r\n    function prevTestimonial() {\r\n        currentIndex = (currentIndex - 1 + testimonials.length) % testimonials.length;\r\n        showTestimonial(currentIndex);\r\n    }\r\n\r\n    function startAutoSlide() {\r\n        interval = setInterval(nextTestimonial, 3000);\r\n    }\r\n\r\n    showTestimonial(currentIndex);\r\n    startAutoSlide();\r\n})","const videoContainer = document.getElementById('video-container');\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const observer = new IntersectionObserver((entries) => {\r\n        entries.forEach(entry => {\r\n            if (entry.isIntersecting) {\r\n                // Cargar el iframe cuando el contenedor es visible\r\n                videoContainer.innerHTML = `\r\n                    <iframe  \r\n                    src=\"https://www.youtube.com/embed/SSqgaFE9igo?si=LWrUKvtolvipBOwv\" \r\n                    title=\"YouTube video player\" \r\n                    frameborder=\"0\" \r\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" \r\n                    referrerpolicy=\"strict-origin-when-cross-origin\" \r\n                    allowfullscreen>\r\n                    </iframe>\r\n                `;\r\n                observer.disconnect(); // Dejar de observar después de cargar\r\n            }\r\n        });\r\n    });\r\n\r\n    observer.observe(videoContainer); // Observar el contenedor del video\r\n})"]}